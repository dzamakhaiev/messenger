services:

  rabbitmq-ci:
    container_name: rabbitmq-ci
    image: "rabbitmq:alpine"
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 30s
    networks:
      - backend-ci

  postgres-ci:
    container_name: postgres-ci
    image: "postgres:alpine"
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 30s
    networks:
      - backend-ci
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - database-ci:/var/lib/postgresql

  listener-ci:
    container_name: listener-ci
    image: "dzamakhaiev/messenger"
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 30s
    depends_on:
      - rabbitmq-ci
      - postgres-ci
    networks:
      - backend-ci
    environment:
      CI_RUN: 1
      BRANCH_NAME: $BRANCH_NAME
      SERVICE_NAME: listener-ci
    volumes:
      - logs-ci:/messenger/server_side/logs
    command: sh -c "sleep 10 && gunicorn -w 2 -k gevent -b 0.0.0.0:5000 'listener:app'"

  sender-ci:
    container_name: sender-ci
    image: "dzamakhaiev/messenger"
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 30s
    depends_on:
      - rabbitmq-ci
      - postgres-ci
    networks:
      - backend-ci
    environment:
      CI_RUN: 1
      BRANCH_NAME: $BRANCH_NAME
      SERVICE_NAME: sender-ci
    volumes:
      - logs-ci:/messenger/server_side/logs
    command: sh -c "sleep 10 && python sender.py"

  nginx-ci:
    container_name: nginx-ci
    image: "dzamakhaiev/messenger-nginx-ci"
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 30s
    ports:
      - "5000:5000"
    depends_on:
      - listener-ci
    networks:
      - backend-ci
    command: sh -c "sleep 15 && nginx -g 'daemon off;'"

  integration-ci:
    container_name: integration-ci
    image: "dzamakhaiev/messenger-tests"
    networks:
      - backend-ci
    environment:
      CI_RUN: 1
    command: sh -c "sleep 45 && python3 -m unittest discover integration -v"

networks:
  backend-ci:
    driver: bridge

volumes:
  logs-ci:
  database-ci: