version: "3"
services:

  rabbitmq:
    container_name: rabbitmq
    image: "rabbitmq:alpine"
    ports:
      - "5672:5672"
    networks:
      - backend

  postgres:
    container_name: postgres
    image: "postgres:alpine"
    ports:
      - "5432:5432"
    networks:
      - backend
    environment:
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./server_side/database:/var/lib/postgresql

  loki:
    container_name: loki
    image: "grafana/loki"
    ports:
      - "3100:3100"
    networks:
      - backend

  listener-1:
    container_name: listener-1
    image: "dzamakhaiev/messenger"
    restart: on-failure
    depends_on:
      - rabbitmq
      - postgres
      - loki
    networks:
      - backend
    command: sh -c "sleep 10 && git pull && python listener.py"

  listener-2:
    container_name: listener-2
    image: "dzamakhaiev/messenger"
    restart: on-failure
    depends_on:
      - rabbitmq
      - postgres
      - loki
    networks:
      - backend
    command: sh -c "sleep 10 && git pull && python listener.py"

  sender-1:
    container_name: sender-1
    image: "dzamakhaiev/messenger"
    restart: on-failure
    depends_on:
      - rabbitmq
      - postgres
      - loki
    networks:
      - backend
    command: sh -c "sleep 10 && git pull && python sender.py"

  sender-2:
    container_name: sender-2
    image: "dzamakhaiev/messenger"
    restart: on-failure
    depends_on:
      - rabbitmq
      - postgres
      - loki
    networks:
      - backend
    command: sh -c "sleep 10 && git pull && python sender.py"

  nginx:
    container_name: nginx
    image: "dzamakhaiev/messenger-nginx"
    restart: on-failure
    depends_on:
      - listener-1
      - listener-2
    ports:
      - "5000:5000"
    networks:
      - backend
    command: sh -c "sleep 15 && nginx -g 'daemon off;'"

networks:
  backend:
    driver: bridge